    IF !DEF(DEFINITIONS_INC)
DEF DEFINITIONS_INC EQU 1

; viewport info
DEF GAMEPLAY_UI_SIZE_Y EQU 8*2
DEF MAP_SIZE_Y EQU 256
DEF MAP_SIZE_X EQU 256
DEF SCREEN_SIZE_Y EQU 144
DEF SCREEN_SIZE_X EQU 160
DEF VIEWPORT_SIZE_Y EQU SCREEN_SIZE_Y - GAMEPLAY_UI_SIZE_Y
DEF VIEWPORT_SIZE_X EQU SCREEN_SIZE_X
DEF VIEWPORT_MAX_Y EQU MAP_SIZE_Y - VIEWPORT_SIZE_Y
DEF VIEWPORT_MAX_X EQU MAP_SIZE_X - VIEWPORT_SIZE_X
DEF SCREEN_UPPER_OFFSET_Y EQU 8
DEF SCREEN_LEFT_OFFSET_X EQU 8

; Types
DEF TYPE_PLAYER EQU 0

; Enemy type
DEF TYPE_ENEMYA EQU 0  ; bit 2, 3 & 4, %000 000 00
DEF TYPE_ENEMYB EQU 4  ; bit 2, 3 & 4, %000 001 00
DEF TYPE_ENEMYC EQU 8  ; bit 2, 3 & 4, %000 010 00
DEF TYPE_ENEMYD EQU 12 ; bit 2, 3 & 4, %000 011 00

DEF TYPE_BULLET1 EQU 4
DEF TYPE_BULLET2 EQU 5
DEF TYPE_BULLET3 EQU 6

; PowerUp types
; equ 0 means no powerup at all
DEF TYPE_INVINCIBILITY_POWERUP EQU 4 ; bit 2, 3 & 4, %000 001 00
DEF TYPE_TIME_POWERUP EQU 8 ; bit 2, 3 & 4, %000 010 00
DEF TYPE_DAMAGE_POWERUP EQU 12 ; bit 2, 3 & 4, %000 011 00
DEF TYPE_SPEED_POWERUP EQU 16 ; bit 2, 3 & 4, %000 100 00
DEF TYPE_HEALTH_POWERUP EQU 20 ; bit 2, 3 & 4, %000 101 00

; power up sprite ID
DEF HEART_POWERUP_SPRITE_ID EQU $68
DEF INVINCIBILITY_POWERUP_SPRITE_ID EQU $64
DEF TIME_POWERUP_SPRITE_ID EQU $66

; Collider Size
DEF PLAYER_COLLIDER_SIZE EQU $08
DEF ENEMY_COLLIDER_SIZE EQU $00
DEF ENEMY_BULLET_COLLIDER_SIZE EQU $08 ; hit box for enemy vs bullet
DEF ENEMY_PLAYER_COLLIDER_SIZE EQU $04 ; hit box for enemy vs player
DEF BULLET_COLLIDER_SIZE EQU $02
DEF POWERUP_COLLIDER_SIZE EQU $02

; States
DEF FLAG_INACTIVE EQU $00
DEF FLAG_ACTIVE EQU $01

DEF FLAG_PLAYER EQU $00 ; bit 1, %0000 00 0 0
DEF FLAG_ENEMY EQU $02  ; bit 1, %0000 00 1 0

; definitions for the bit flags
DEF BIT_FLAG_ACTIVE EQU $0 ; 0 bit
DEF BIT_FLAG_PLAYER EQU $1 ; 1 bit

DEF BIT_MASK_TYPE EQU %00011100 ; to do bit masking for power up type/enemy type
DEF BIT_MASK_TYPE_REMOVE EQU %11100011

; Directions
; can use cp to compare, takes reg A, but takes only 1 cycle and 1 byte
DEF DIR_UP EQU 0
DEF DIR_DOWN EQU 1
DEF DIR_LEFT EQU 2
DEF DIR_RIGHT EQU 3
DEF DIR_BIT_MASK EQU %00000011

; Shoot directions, use bit to compare
; for when the direction of shooting is different with direction entity is facing
DEF SHOOT_DIR_UP EQU %00010000 ; bit 4 true
DEF SHOOT_DIR_DOWN EQU %00100000 ; bit 5 tru
DEF SHOOT_DIR_LEFT EQU %01000000 ; bit 6 true
DEF SHOOT_DIR_RIGHT EQU %10000000 ; bit 7 true
DEF SHOOT_DIR_BIT_MASK EQU %11110000

DEF BIT_SHOOT_UP_CMP EQU 4 
DEF BIT_SHOOT_DOWN_CMP EQU 5
DEF BIT_SHOOT_LEFT_CMP EQU 6
DEF BIT_SHOOT_RIGHT_CMP EQU 7

; Tiles
DEF TILE_SIZE EQU $08
DEF EMPTY_TILE EQU $20
DEF CHARACTER_COLLIDABLE_TILES EQU $10 ; Collidable Tiles: A tile is assumed to be collidable by characters if it's value is less than 16.
DEF BULLET_COLLIDABLE_TILES EQU $09 ; Collidable Tiles: A tile is assumed to be collidable by bullets if it's value is less than 9.
DEF BULLET_DESTRUCTIBLE_TILES EQU $01 ; Collidable Tiles: A tile is assumed to be collidable by bullets if it's value is less than 1.
DEF BOMB_DESTRUCTIBLE_TILES EQU $02 ; Collidable Tiles: A tile is assumed to be collidable by bullets if it's value is less than 2.

; Velocity
DEF VELOCITY_VSLOW EQU $0040
DEF VELOCITY_SLOW EQU $0080
DEF VELOCITY_NORMAL EQU $0100
DEF VELOCITY_FAST EQU $0200
DEF VELOCITY_VFAST EQU $0400

; For Animation Frames
DEF PLAYER_WALK_FRAMES EQU 3

; PLAYER DATA
DEF PLAYER_BULLET_NUMBER EQU 3
DEF BULLET_DAMAGE EQU 1 ; TEMP VARIABLE
DEF PLAYER_HEALTH EQU 3

; Enemy DATA
DEF ENEMY_TYPEA_BULLET_NUM EQU 10
DEF ENEMY_TYPEA_HEALTH EQU 3
DEF ENEMY_TYPEA_WALK_FRAMES EQU 2
DEF ENEMY_TYPEA_ATTACK_ANIM_MAX_FRAMES EQU 3
DEF ENEMY_TYPEA_ANIMATION_UPDATE_SPEED EQU $08 ; 16, takes 16 frames for next animation frame, abt 4fps
DEF ENEMY_TYPEA_ATTACK_STATE_FRAME EQU 7 ; frame to start playing attack anim
DEF ENEMY_TYPEA_ATTACK_FRAME EQU 8 ; frame to shoot

; Enemy B Data
DEF ENEMY_TYPEB_HEALTH EQU 5
DEF ENEMY_TYPEB_ANIMATION_UPDATE_SPEED EQU $10
; attack duration = ENEMY_TYPEB_ATTACK_STATE_STOP_FRAME - ENEMY_TYPEB_ATTACK_STATE_FRAME
; as long frame >= ENEMY_TYPEB_ATTACK_STATE_FRAME, its attack state
DEF ENEMY_TYPEB_ATTACK_STATE_FRAME EQU 3 ; frame to go attack state after enemy senses player on same line
DEF ENEMY_TYPEB_ATTACK_STATE_STOP_FRAME EQU 17; frame to stop attack state. 
DEF ENEMY_TYPEB_REST_STATE_FRAME EQU 3 ; number of frames to rest after attack state
DEF ENEMY_TYPEB_WALK_MAX_FRAMES EQU 2
DEF ENEMY_TYPEB_ATTACK_ANIM_MAX_FRAMES EQU 4

; Enemy C data
DEF ENEMY_TYPEC_HEALTH EQU 2
DEF ENEMY_TYPEC_ANIMATION_UPDATE_SPEED EQU $10
DEF ENEMY_TYPEC_SHOOT_FRAME EQU 10 ; frame to shoot
DEF ENEMY_TYPEC_NORMAL_STATE_FRAME EQU 2

; Enemy D data
; wake up duration = ENEMY_TYPED_CHASE_STATE_FRAME - ENEMY_TYPED_WAKEUP_STATE_FRAME
; sleep state is < ENEMY_TYPED_WAKEUP_STATE_FRAME
DEF ENEMY_TYPED_HEALTH EQU 5
DEF ENEMY_TYPED_ANIMATION_UPDATE_SPEED EQU $10
DEF ENEMY_TYPED_CHASE_STATE_FRAME EQU 5 ; frame to indicate chase state
DEF ENEMY_TYPED_WAKEUP_STATE_FRAME EQU 2 ; frame to indicate wake up state
DEF ENEMY_TYPED_ANIMATION_MAX_FRAME EQU 2 ; max animation frame for type D
DEF ENEMY_TYPED_ANIMATION_FRAMES EQU 2

; Flicker effect
DEF FLICKER_BITMASK EQU %00000001 ; the multiple we want to compare
DEF FLICKER_VALUE EQU 1 ; value to not render
DEF PLAYER_FLICKER_UPDATE_SPEED EQU 30 ; 256/FLICKER_UPDATE_SPEED number of frames to stop flicker effect
DEF ENEMY_FLICKER_UPDATE_SPEED EQU 40

; Damage flicker effect
DEF DAMAGE_FLICKER_EFFECT EQU 5 ; number of times to do the flicker effect based on the flicker timer

; Powerup flicker effect
; formula: number of times updated in 1s = 60frames / (256 / POWER_UP_FLICKER_UPDATE_SPEED)
; POWER_UP_FLICKER_EFFECT time in seconds = number of times updated in 1s * time wanted
DEF INVINCIBILITY_FLICKER_EFFECT_TIME EQU 5
DEF INVINCIBILITY_FLICKER_EFFECT EQU 60/(256/PLAYER_FLICKER_UPDATE_SPEED) * INVINCIBILITY_FLICKER_EFFECT_TIME

DEF SPEED_FLICKER_EFFECT_TIME EQU 5
DEF SPEED_FLICKER_EFFECT EQU 60/(256/PLAYER_FLICKER_UPDATE_SPEED) * SPEED_FLICKER_EFFECT_TIME


ENDC ; DEFINITIONS_INC
